{"ast":null,"code":"import axios from 'axios';\n\n// Создаем экземпляр axios с настроенным baseURL\nconst instance = axios.create({\n  // Используем относительный путь для API - это работает с Vue CLI proxy\n  baseURL: '/api',\n  withCredentials: true,\n  // Важно для передачи httpOnly cookie\n  timeout: 30000,\n  // 30 секунд тайм-аут - увеличиваем для медленных соединений\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Добавляем перехватчик для обработки ошибок\ninstance.interceptors.response.use(response => response, error => {\n  console.error('Axios error:', error);\n\n  // Подробное логирование ошибки\n  if (error.response) {\n    // Ошибка с ответом от сервера (HTTP ошибка)\n    console.error('Status:', error.response.status);\n    console.error('Data:', error.response.data);\n    console.error('Headers:', error.response.headers);\n  } else if (error.request) {\n    // Ошибка без ответа от сервера (нет соединения)\n    console.error('Request was made but no response received:', error.request);\n  } else {\n    // Ошибка при создании запроса\n    console.error('Error during request setup:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","withCredentials","timeout","headers","interceptors","response","use","error","console","status","data","request","message","Promise","reject"],"sources":["/app/src/utils/axios.js"],"sourcesContent":["import axios from 'axios';\n\n// Создаем экземпляр axios с настроенным baseURL\nconst instance = axios.create({\n  // Используем относительный путь для API - это работает с Vue CLI proxy\n  baseURL: '/api',\n  withCredentials: true, // Важно для передачи httpOnly cookie\n  timeout: 30000, // 30 секунд тайм-аут - увеличиваем для медленных соединений\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Добавляем перехватчик для обработки ошибок\ninstance.interceptors.response.use(\n  response => response,\n  error => {\n    console.error('Axios error:', error);\n    \n    // Подробное логирование ошибки\n    if (error.response) {\n      // Ошибка с ответом от сервера (HTTP ошибка)\n      console.error('Status:', error.response.status);\n      console.error('Data:', error.response.data);\n      console.error('Headers:', error.response.headers);\n    } else if (error.request) {\n      // Ошибка без ответа от сервера (нет соединения)\n      console.error('Request was made but no response received:', error.request);\n    } else {\n      // Ошибка при создании запроса\n      console.error('Error during request setup:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default instance;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5B;EACAC,OAAO,EAAE,MAAM;EACfC,eAAe,EAAE,IAAI;EAAE;EACvBC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACAL,QAAQ,CAACM,YAAY,CAACC,QAAQ,CAACC,GAAG,CAChCD,QAAQ,IAAIA,QAAQ,EACpBE,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;;EAEpC;EACA,IAAIA,KAAK,CAACF,QAAQ,EAAE;IAClB;IACAG,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACF,QAAQ,CAACI,MAAM,CAAC;IAC/CD,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACF,QAAQ,CAACK,IAAI,CAAC;IAC3CF,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACF,QAAQ,CAACF,OAAO,CAAC;EACnD,CAAC,MAAM,IAAII,KAAK,CAACI,OAAO,EAAE;IACxB;IACAH,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAACI,OAAO,CAAC;EAC5E,CAAC,MAAM;IACL;IACAH,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACK,OAAO,CAAC;EAC7D;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeT,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}