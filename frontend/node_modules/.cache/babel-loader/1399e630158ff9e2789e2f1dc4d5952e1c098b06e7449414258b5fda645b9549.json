{"ast":null,"code":"import axios from 'axios';\nimport router from '../../router';\nimport jwt_decode from 'jwt-decode';\n// Toast notifications will be handled by components\n\n// Helper to check if token is expired\nconst isTokenExpired = token => {\n  try {\n    const decoded = jwt_decode(token);\n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  } catch {\n    return true;\n  }\n};\nconst state = {\n  token: localStorage.getItem('token') || null,\n  user: JSON.parse(localStorage.getItem('user')) || null\n};\nconst getters = {\n  isAuthenticated: state => !!state.token && !isTokenExpired(state.token),\n  currentUser: state => state.user,\n  token: state => state.token\n};\nconst mutations = {\n  SET_AUTH(state, {\n    token,\n    user\n  }) {\n    state.token = token;\n    state.user = user;\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n  CLEAR_AUTH(state) {\n    state.token = null;\n    state.user = null;\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\nconst actions = {\n  async login({\n    commit,\n    dispatch\n  }, credentials) {\n    try {\n      dispatch('setLoading', true, {\n        root: true\n      });\n      const response = await axios.post('/api/auth/login', credentials);\n      const {\n        token,\n        user\n      } = response.data;\n      commit('SET_AUTH', {\n        token,\n        user\n      });\n\n      // Integrate with cart if there are items in the guest cart\n      dispatch('cart/migrateGuestCart', null, {\n        root: true\n      });\n      toast.success('Вы успешно вошли в систему');\n\n      // Redirect if there was a previous page the user was trying to access\n      const redirectPath = router.currentRoute.value.query.redirect || '/';\n      router.push(redirectPath);\n      return {\n        success: true\n      };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при входе в систему';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  },\n  async register({\n    commit,\n    dispatch\n  }, userData) {\n    try {\n      dispatch('setLoading', true, {\n        root: true\n      });\n      const response = await axios.post('/api/auth/register', userData);\n      const {\n        token,\n        user\n      } = response.data;\n      commit('SET_AUTH', {\n        token,\n        user\n      });\n\n      // Integrate with cart if there are items in the guest cart\n      dispatch('cart/migrateGuestCart', null, {\n        root: true\n      });\n      toast.success('Регистрация прошла успешно');\n      router.push('/');\n      return {\n        success: true\n      };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при регистрации';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  },\n  logout({\n    commit\n  }) {\n    commit('CLEAR_AUTH');\n\n    // Clear cart state but not localStorage (maintain guest cart)\n    commit('cart/CLEAR_USER_CART', null, {\n      root: true\n    });\n    toast.info('Вы вышли из системы');\n    router.push('/');\n  },\n  async updatePassword({\n    dispatch,\n    getters\n  }, {\n    currentPassword,\n    newPassword\n  }) {\n    try {\n      dispatch('setLoading', true, {\n        root: true\n      });\n      await axios.put('/api/auth/password', {\n        currentPassword,\n        newPassword\n      }, {\n        headers: {\n          Authorization: `Bearer ${getters.token}`\n        }\n      });\n      toast.success('Пароль успешно обновлен');\n      return {\n        success: true\n      };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при обновлении пароля';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  },\n  checkAuth({\n    commit,\n    state\n  }) {\n    if (state.token && isTokenExpired(state.token)) {\n      commit('CLEAR_AUTH');\n      toast.info('Сессия истекла. Пожалуйста, войдите снова.');\n      router.push('/login');\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","router","jwt_decode","isTokenExpired","token","decoded","currentTime","Date","now","exp","state","localStorage","getItem","user","JSON","parse","getters","isAuthenticated","currentUser","mutations","SET_AUTH","setItem","stringify","CLEAR_AUTH","removeItem","actions","login","commit","dispatch","credentials","root","response","post","data","toast","success","redirectPath","currentRoute","value","query","redirect","push","error","message","register","userData","logout","info","updatePassword","currentPassword","newPassword","put","headers","Authorization","checkAuth","namespaced"],"sources":["C:/Users/geeksaider/VeloW/frontend/src/store/modules/auth.js"],"sourcesContent":["import axios from 'axios';\nimport router from '../../router';\nimport jwt_decode from 'jwt-decode';\n// Toast notifications will be handled by components\n\n// Helper to check if token is expired\nconst isTokenExpired = (token) => {\n  try {\n    const decoded = jwt_decode(token);\n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  } catch {\n    return true;\n  }\n};\n\nconst state = {\n  token: localStorage.getItem('token') || null,\n  user: JSON.parse(localStorage.getItem('user')) || null\n};\n\nconst getters = {\n  isAuthenticated: (state) => !!state.token && !isTokenExpired(state.token),\n  currentUser: (state) => state.user,\n  token: (state) => state.token\n};\n\nconst mutations = {\n  SET_AUTH(state, { token, user }) {\n    state.token = token;\n    state.user = user;\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n  CLEAR_AUTH(state) {\n    state.token = null;\n    state.user = null;\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\nconst actions = {\n  async login({ commit, dispatch }, credentials) {\n    try {\n      dispatch('setLoading', true, { root: true });\n      const response = await axios.post('/api/auth/login', credentials);\n      const { token, user } = response.data;\n      \n      commit('SET_AUTH', { token, user });\n      \n      // Integrate with cart if there are items in the guest cart\n      dispatch('cart/migrateGuestCart', null, { root: true });\n      \n      toast.success('Вы успешно вошли в систему');\n      \n      // Redirect if there was a previous page the user was trying to access\n      const redirectPath = router.currentRoute.value.query.redirect || '/';\n      router.push(redirectPath);\n      \n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при входе в систему';\n      toast.error(message);\n      return { success: false, message };\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  },\n  \n  async register({ commit, dispatch }, userData) {\n    try {\n      dispatch('setLoading', true, { root: true });\n      const response = await axios.post('/api/auth/register', userData);\n      const { token, user } = response.data;\n      \n      commit('SET_AUTH', { token, user });\n      \n      // Integrate with cart if there are items in the guest cart\n      dispatch('cart/migrateGuestCart', null, { root: true });\n      \n      toast.success('Регистрация прошла успешно');\n      router.push('/');\n      \n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при регистрации';\n      toast.error(message);\n      return { success: false, message };\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  },\n  \n  logout({ commit }) {\n    commit('CLEAR_AUTH');\n    \n    // Clear cart state but not localStorage (maintain guest cart)\n    commit('cart/CLEAR_USER_CART', null, { root: true });\n    \n    toast.info('Вы вышли из системы');\n    router.push('/');\n  },\n  \n  async updatePassword({ dispatch, getters }, { currentPassword, newPassword }) {\n    try {\n      dispatch('setLoading', true, { root: true });\n      await axios.put('/api/auth/password', { currentPassword, newPassword }, {\n        headers: { Authorization: `Bearer ${getters.token}` }\n      });\n      \n      toast.success('Пароль успешно обновлен');\n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при обновлении пароля';\n      toast.error(message);\n      return { success: false, message };\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  },\n  \n  checkAuth({ commit, state }) {\n    if (state.token && isTokenExpired(state.token)) {\n      commit('CLEAR_AUTH');\n      toast.info('Сессия истекла. Пожалуйста, войдите снова.');\n      router.push('/login');\n    }\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}