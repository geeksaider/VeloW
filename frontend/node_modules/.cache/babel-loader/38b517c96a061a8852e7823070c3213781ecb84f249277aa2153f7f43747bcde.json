{"ast":null,"code":"import axios from 'axios';\nimport { useToast } from 'vue-toastification';\nimport router from '../../router';\nconst toast = useToast();\nconst state = {\n  orders: [],\n  currentOrder: null\n};\nconst getters = {\n  allOrders: state => state.orders,\n  currentOrder: state => state.currentOrder\n};\nconst mutations = {\n  SET_ORDERS(state, orders) {\n    state.orders = orders;\n  },\n  SET_CURRENT_ORDER(state, order) {\n    state.currentOrder = order;\n  },\n  ADD_ORDER(state, order) {\n    state.orders.unshift(order);\n  }\n};\nconst actions = {\n  async fetchOrders({\n    commit,\n    rootGetters,\n    dispatch\n  }) {\n    if (!rootGetters['auth/isAuthenticated']) {\n      return;\n    }\n    try {\n      dispatch('setLoading', true, {\n        root: true\n      });\n      const response = await axios.get('/api/orders', {\n        headers: {\n          Authorization: `Bearer ${rootGetters['auth/token']}`\n        }\n      });\n      commit('SET_ORDERS', response.data);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      toast.error('Не удалось загрузить заказы');\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  },\n  async fetchOrder({\n    commit,\n    rootGetters,\n    dispatch\n  }, orderId) {\n    try {\n      dispatch('setLoading', true, {\n        root: true\n      });\n      const response = await axios.get(`/api/orders/${orderId}`, {\n        headers: {\n          Authorization: `Bearer ${rootGetters['auth/token']}`\n        }\n      });\n      commit('SET_CURRENT_ORDER', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching order ${orderId}:`, error);\n      toast.error('Не удалось загрузить информацию о заказе');\n      return null;\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  },\n  async createOrder({\n    commit,\n    rootGetters,\n    dispatch\n  }) {\n    try {\n      dispatch('setLoading', true, {\n        root: true\n      });\n      if (!rootGetters['auth/isAuthenticated']) {\n        toast.error('Для оформления заказа необходимо войти в систему');\n        router.push('/login?redirect=/checkout');\n        return {\n          success: false,\n          message: 'Требуется авторизация'\n        };\n      }\n      const response = await axios.post('/api/orders', {}, {\n        headers: {\n          Authorization: `Bearer ${rootGetters['auth/token']}`\n        }\n      });\n      commit('ADD_ORDER', response.data);\n\n      // Clear the cart after successful order\n      dispatch('cart/clearCart', null, {\n        root: true\n      });\n      toast.success('Заказ успешно оформлен');\n      router.push(`/account?tab=orders`);\n      return {\n        success: true,\n        order: response.data\n      };\n    } catch (error) {\n      console.error('Error creating order:', error);\n      const message = error.response?.data?.message || 'Ошибка при оформлении заказа';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","useToast","router","toast","state","orders","currentOrder","getters","allOrders","mutations","SET_ORDERS","SET_CURRENT_ORDER","order","ADD_ORDER","unshift","actions","fetchOrders","commit","rootGetters","dispatch","root","response","get","headers","Authorization","data","error","console","fetchOrder","orderId","createOrder","push","success","message","post","namespaced"],"sources":["/app/src/store/modules/orders.js"],"sourcesContent":["import axios from 'axios';\nimport { useToast } from 'vue-toastification';\nimport router from '../../router';\n\nconst toast = useToast();\n\nconst state = {\n  orders: [],\n  currentOrder: null\n};\n\nconst getters = {\n  allOrders: (state) => state.orders,\n  currentOrder: (state) => state.currentOrder\n};\n\nconst mutations = {\n  SET_ORDERS(state, orders) {\n    state.orders = orders;\n  },\n  \n  SET_CURRENT_ORDER(state, order) {\n    state.currentOrder = order;\n  },\n  \n  ADD_ORDER(state, order) {\n    state.orders.unshift(order);\n  }\n};\n\nconst actions = {\n  async fetchOrders({ commit, rootGetters, dispatch }) {\n    if (!rootGetters['auth/isAuthenticated']) {\n      return;\n    }\n    \n    try {\n      dispatch('setLoading', true, { root: true });\n      \n      const response = await axios.get('/api/orders', {\n        headers: { Authorization: `Bearer ${rootGetters['auth/token']}` }\n      });\n      \n      commit('SET_ORDERS', response.data);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      toast.error('Не удалось загрузить заказы');\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  },\n  \n  async fetchOrder({ commit, rootGetters, dispatch }, orderId) {\n    try {\n      dispatch('setLoading', true, { root: true });\n      \n      const response = await axios.get(`/api/orders/${orderId}`, {\n        headers: { Authorization: `Bearer ${rootGetters['auth/token']}` }\n      });\n      \n      commit('SET_CURRENT_ORDER', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching order ${orderId}:`, error);\n      toast.error('Не удалось загрузить информацию о заказе');\n      return null;\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  },\n  \n  async createOrder({ commit, rootGetters, dispatch }) {\n    try {\n      dispatch('setLoading', true, { root: true });\n      \n      if (!rootGetters['auth/isAuthenticated']) {\n        toast.error('Для оформления заказа необходимо войти в систему');\n        router.push('/login?redirect=/checkout');\n        return { success: false, message: 'Требуется авторизация' };\n      }\n      \n      const response = await axios.post('/api/orders', {}, {\n        headers: { Authorization: `Bearer ${rootGetters['auth/token']}` }\n      });\n      \n      commit('ADD_ORDER', response.data);\n      \n      // Clear the cart after successful order\n      dispatch('cart/clearCart', null, { root: true });\n      \n      toast.success('Заказ успешно оформлен');\n      router.push(`/account?tab=orders`);\n      \n      return { success: true, order: response.data };\n    } catch (error) {\n      console.error('Error creating order:', error);\n      const message = error.response?.data?.message || 'Ошибка при оформлении заказа';\n      toast.error(message);\n      return { success: false, message };\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAOC,MAAM,MAAM,cAAc;AAEjC,MAAMC,KAAK,GAAGF,QAAQ,CAAC,CAAC;AAExB,MAAMG,KAAK,GAAG;EACZC,MAAM,EAAE,EAAE;EACVC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,OAAO,GAAG;EACdC,SAAS,EAAGJ,KAAK,IAAKA,KAAK,CAACC,MAAM;EAClCC,YAAY,EAAGF,KAAK,IAAKA,KAAK,CAACE;AACjC,CAAC;AAED,MAAMG,SAAS,GAAG;EAChBC,UAAUA,CAACN,KAAK,EAAEC,MAAM,EAAE;IACxBD,KAAK,CAACC,MAAM,GAAGA,MAAM;EACvB,CAAC;EAEDM,iBAAiBA,CAACP,KAAK,EAAEQ,KAAK,EAAE;IAC9BR,KAAK,CAACE,YAAY,GAAGM,KAAK;EAC5B,CAAC;EAEDC,SAASA,CAACT,KAAK,EAAEQ,KAAK,EAAE;IACtBR,KAAK,CAACC,MAAM,CAACS,OAAO,CAACF,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,MAAMG,OAAO,GAAG;EACd,MAAMC,WAAWA,CAAC;IAAEC,MAAM;IAAEC,WAAW;IAAEC;EAAS,CAAC,EAAE;IACnD,IAAI,CAACD,WAAW,CAAC,sBAAsB,CAAC,EAAE;MACxC;IACF;IAEA,IAAI;MACFC,QAAQ,CAAC,YAAY,EAAE,IAAI,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;MAE5C,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,aAAa,EAAE;QAC9CC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,WAAW,CAAC,YAAY,CAAC;QAAG;MAClE,CAAC,CAAC;MAEFD,MAAM,CAAC,YAAY,EAAEI,QAAQ,CAACI,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CvB,KAAK,CAACuB,KAAK,CAAC,6BAA6B,CAAC;IAC5C,CAAC,SAAS;MACRP,QAAQ,CAAC,YAAY,EAAE,KAAK,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;IAC/C;EACF,CAAC;EAED,MAAMQ,UAAUA,CAAC;IAAEX,MAAM;IAAEC,WAAW;IAAEC;EAAS,CAAC,EAAEU,OAAO,EAAE;IAC3D,IAAI;MACFV,QAAQ,CAAC,YAAY,EAAE,IAAI,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;MAE5C,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,eAAeO,OAAO,EAAE,EAAE;QACzDN,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,WAAW,CAAC,YAAY,CAAC;QAAG;MAClE,CAAC,CAAC;MAEFD,MAAM,CAAC,mBAAmB,EAAEI,QAAQ,CAACI,IAAI,CAAC;MAC1C,OAAOJ,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwBG,OAAO,GAAG,EAAEH,KAAK,CAAC;MACxDvB,KAAK,CAACuB,KAAK,CAAC,0CAA0C,CAAC;MACvD,OAAO,IAAI;IACb,CAAC,SAAS;MACRP,QAAQ,CAAC,YAAY,EAAE,KAAK,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;IAC/C;EACF,CAAC;EAED,MAAMU,WAAWA,CAAC;IAAEb,MAAM;IAAEC,WAAW;IAAEC;EAAS,CAAC,EAAE;IACnD,IAAI;MACFA,QAAQ,CAAC,YAAY,EAAE,IAAI,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;MAE5C,IAAI,CAACF,WAAW,CAAC,sBAAsB,CAAC,EAAE;QACxCf,KAAK,CAACuB,KAAK,CAAC,kDAAkD,CAAC;QAC/DxB,MAAM,CAAC6B,IAAI,CAAC,2BAA2B,CAAC;QACxC,OAAO;UAAEC,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAwB,CAAC;MAC7D;MAEA,MAAMZ,QAAQ,GAAG,MAAMrB,KAAK,CAACkC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE;QACnDX,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,WAAW,CAAC,YAAY,CAAC;QAAG;MAClE,CAAC,CAAC;MAEFD,MAAM,CAAC,WAAW,EAAEI,QAAQ,CAACI,IAAI,CAAC;;MAElC;MACAN,QAAQ,CAAC,gBAAgB,EAAE,IAAI,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;MAEhDjB,KAAK,CAAC6B,OAAO,CAAC,wBAAwB,CAAC;MACvC9B,MAAM,CAAC6B,IAAI,CAAC,qBAAqB,CAAC;MAElC,OAAO;QAAEC,OAAO,EAAE,IAAI;QAAEpB,KAAK,EAAES,QAAQ,CAACI;MAAK,CAAC;IAChD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMO,OAAO,GAAGP,KAAK,CAACL,QAAQ,EAAEI,IAAI,EAAEQ,OAAO,IAAI,8BAA8B;MAC/E9B,KAAK,CAACuB,KAAK,CAACO,OAAO,CAAC;MACpB,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC;MAAQ,CAAC;IACpC,CAAC,SAAS;MACRd,QAAQ,CAAC,YAAY,EAAE,KAAK,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;IAC/C;EACF;AACF,CAAC;AAED,eAAe;EACbe,UAAU,EAAE,IAAI;EAChB/B,KAAK;EACLG,OAAO;EACPE,SAAS;EACTM;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}