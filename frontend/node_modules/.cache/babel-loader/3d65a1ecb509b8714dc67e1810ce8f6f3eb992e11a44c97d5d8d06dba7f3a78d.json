{"ast":null,"code":"import axios from '../../utils/axios';\nimport router from '../../router';\nimport jwt_decode from 'jwt-decode';\nimport { useToast } from 'vue-toastification';\n\n// Инициализация toast\nconst toast = useToast();\n\n// Helper to check if token is expired\nconst isTokenExpired = token => {\n  try {\n    const decoded = jwt_decode(token);\n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  } catch {\n    return true;\n  }\n};\nconst state = {\n  token: localStorage.getItem('token') || null,\n  user: JSON.parse(localStorage.getItem('user')) || null\n};\nconst getters = {\n  isAuthenticated: state => !!state.token && !isTokenExpired(state.token),\n  currentUser: state => state.user,\n  token: state => state.token,\n  isAdmin: state => state.user && state.user.role === 'admin'\n};\nconst mutations = {\n  SET_AUTH(state, {\n    token,\n    user\n  }) {\n    state.token = token;\n    state.user = user;\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n  CLEAR_AUTH(state) {\n    state.token = null;\n    state.user = null;\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\nconst actions = {\n  async login({\n    commit,\n    dispatch\n  }, credentials) {\n    try {\n      dispatch('setLoading', true, {\n        root: true\n      });\n      const response = await axios.post('/api/auth/login', credentials);\n      const {\n        token,\n        user\n      } = response.data;\n      commit('SET_AUTH', {\n        token,\n        user\n      });\n\n      // Integrate with cart if there are items in the guest cart\n      dispatch('cart/migrateGuestCart', null, {\n        root: true\n      });\n      toast.success('Вы успешно вошли в систему');\n\n      // Redirect if there was a previous page the user was trying to access\n      const redirectPath = router.currentRoute.value.query.redirect || '/';\n      router.push(redirectPath);\n      return {\n        success: true\n      };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при входе в систему';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  },\n  async register({\n    commit,\n    dispatch\n  }, userData) {\n    try {\n      console.log('Начало регистрации:', userData.email);\n      dispatch('setLoading', true, {\n        root: true\n      });\n\n      // Убедимся, что данные формируются правильно\n      const registerData = {\n        email: userData.email,\n        password: userData.password\n      };\n      console.log('Отправляемые данные:', JSON.stringify(registerData));\n\n      // Отправляем запрос на регистрацию\n      const response = await axios.post('/auth/register', registerData);\n      console.log('Ответ от сервера:', response.data);\n      if (response.data && response.data.token && response.data.user) {\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Сохраняем данные аутентификации\n        commit('SET_AUTH', {\n          token,\n          user\n        });\n\n        // Интегрируем корзину гостя, если есть товары\n        dispatch('cart/migrateGuestCart', null, {\n          root: true\n        });\n        toast.success('Регистрация прошла успешно');\n        router.push('/');\n        return {\n          success: true\n        };\n      } else {\n        // Неожиданный формат ответа\n        console.error('Неожиданный формат ответа:', response.data);\n        toast.error('Некорректный ответ сервера при регистрации');\n        return {\n          success: false,\n          message: 'Некорректный ответ сервера'\n        };\n      }\n    } catch (error) {\n      console.error('Ошибка при регистрации:', error);\n\n      // Детальное логирование ошибки\n      if (error.response) {\n        console.error('HTTP статус:', error.response.status);\n        console.error('Данные ответа:', error.response.data);\n      }\n      let message = 'Ошибка при регистрации';\n      if (error.response?.data?.message) {\n        message = error.response.data.message;\n      } else if (error.message) {\n        message = `Ошибка: ${error.message}`;\n      }\n      if (error.response?.status === 500) {\n        message = 'Внутренняя ошибка сервера. Пожалуйста, попробуйте позже или свяжитесь с администратором.';\n      } else if (error.response?.status === 400) {\n        message = error.response.data.message || 'Неверные данные для регистрации';\n      }\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  },\n  logout({\n    commit\n  }) {\n    commit('CLEAR_AUTH');\n\n    // Clear cart state but not localStorage (maintain guest cart)\n    commit('cart/CLEAR_USER_CART', null, {\n      root: true\n    });\n    toast.info('Вы вышли из системы');\n    router.push('/');\n  },\n  async updatePassword({\n    dispatch,\n    getters\n  }, {\n    currentPassword,\n    newPassword\n  }) {\n    try {\n      dispatch('setLoading', true, {\n        root: true\n      });\n      await axios.put('/api/auth/password', {\n        currentPassword,\n        newPassword\n      }, {\n        headers: {\n          Authorization: `Bearer ${getters.token}`\n        }\n      });\n      toast.success('Пароль успешно обновлен');\n      return {\n        success: true\n      };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при обновлении пароля';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      dispatch('setLoading', false, {\n        root: true\n      });\n    }\n  },\n  checkAuth({\n    commit,\n    state\n  }) {\n    if (state.token && isTokenExpired(state.token)) {\n      commit('CLEAR_AUTH');\n      toast.info('Сессия истекла. Пожалуйста, войдите снова.');\n      router.push('/login');\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","router","jwt_decode","useToast","toast","isTokenExpired","token","decoded","currentTime","Date","now","exp","state","localStorage","getItem","user","JSON","parse","getters","isAuthenticated","currentUser","isAdmin","role","mutations","SET_AUTH","setItem","stringify","CLEAR_AUTH","removeItem","actions","login","commit","dispatch","credentials","root","response","post","data","success","redirectPath","currentRoute","value","query","redirect","push","error","message","register","userData","console","log","email","registerData","password","status","logout","info","updatePassword","currentPassword","newPassword","put","headers","Authorization","checkAuth","namespaced"],"sources":["C:/Users/geeksaider/VeloW/frontend/src/store/modules/auth.js"],"sourcesContent":["import axios from '../../utils/axios';\nimport router from '../../router';\nimport jwt_decode from 'jwt-decode';\nimport { useToast } from 'vue-toastification';\n\n// Инициализация toast\nconst toast = useToast();\n\n// Helper to check if token is expired\nconst isTokenExpired = (token) => {\n  try {\n    const decoded = jwt_decode(token);\n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  } catch {\n    return true;\n  }\n};\n\nconst state = {\n  token: localStorage.getItem('token') || null,\n  user: JSON.parse(localStorage.getItem('user')) || null\n};\n\nconst getters = {\n  isAuthenticated: (state) => !!state.token && !isTokenExpired(state.token),\n  currentUser: (state) => state.user,\n  token: (state) => state.token,\n  isAdmin: (state) => state.user && state.user.role === 'admin'\n};\n\nconst mutations = {\n  SET_AUTH(state, { token, user }) {\n    state.token = token;\n    state.user = user;\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n  CLEAR_AUTH(state) {\n    state.token = null;\n    state.user = null;\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\nconst actions = {\n  async login({ commit, dispatch }, credentials) {\n    try {\n      dispatch('setLoading', true, { root: true });\n      const response = await axios.post('/api/auth/login', credentials);\n      const { token, user } = response.data;\n      \n      commit('SET_AUTH', { token, user });\n      \n      // Integrate with cart if there are items in the guest cart\n      dispatch('cart/migrateGuestCart', null, { root: true });\n      \n      toast.success('Вы успешно вошли в систему');\n      \n      // Redirect if there was a previous page the user was trying to access\n      const redirectPath = router.currentRoute.value.query.redirect || '/';\n      router.push(redirectPath);\n      \n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при входе в систему';\n      toast.error(message);\n      return { success: false, message };\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  },\n  \n  async register({ commit, dispatch }, userData) {\n    try {\n      console.log('Начало регистрации:', userData.email);\n      dispatch('setLoading', true, { root: true });\n      \n      // Убедимся, что данные формируются правильно\n      const registerData = {\n        email: userData.email,\n        password: userData.password\n      };\n      \n      console.log('Отправляемые данные:', JSON.stringify(registerData));\n      \n      // Отправляем запрос на регистрацию\n      const response = await axios.post('/auth/register', registerData);\n      console.log('Ответ от сервера:', response.data);\n      \n      if (response.data && response.data.token && response.data.user) {\n        const { token, user } = response.data;\n        \n        // Сохраняем данные аутентификации\n        commit('SET_AUTH', { token, user });\n        \n        // Интегрируем корзину гостя, если есть товары\n        dispatch('cart/migrateGuestCart', null, { root: true });\n        \n        toast.success('Регистрация прошла успешно');\n        router.push('/');\n        \n        return { success: true };\n      } else {\n        // Неожиданный формат ответа\n        console.error('Неожиданный формат ответа:', response.data);\n        toast.error('Некорректный ответ сервера при регистрации');\n        return { success: false, message: 'Некорректный ответ сервера' };\n      }\n    } catch (error) {\n      console.error('Ошибка при регистрации:', error);\n      \n      // Детальное логирование ошибки\n      if (error.response) {\n        console.error('HTTP статус:', error.response.status);\n        console.error('Данные ответа:', error.response.data);\n      }\n      \n      let message = 'Ошибка при регистрации';\n      if (error.response?.data?.message) {\n        message = error.response.data.message;\n      } else if (error.message) {\n        message = `Ошибка: ${error.message}`;\n      }\n      \n      if (error.response?.status === 500) {\n        message = 'Внутренняя ошибка сервера. Пожалуйста, попробуйте позже или свяжитесь с администратором.';\n      } else if (error.response?.status === 400) {\n        message = error.response.data.message || 'Неверные данные для регистрации';\n      }\n      \n      toast.error(message);\n      return { success: false, message };\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  },\n  \n  logout({ commit }) {\n    commit('CLEAR_AUTH');\n    \n    // Clear cart state but not localStorage (maintain guest cart)\n    commit('cart/CLEAR_USER_CART', null, { root: true });\n    \n    toast.info('Вы вышли из системы');\n    router.push('/');\n  },\n  \n  async updatePassword({ dispatch, getters }, { currentPassword, newPassword }) {\n    try {\n      dispatch('setLoading', true, { root: true });\n      await axios.put('/api/auth/password', { currentPassword, newPassword }, {\n        headers: { Authorization: `Bearer ${getters.token}` }\n      });\n      \n      toast.success('Пароль успешно обновлен');\n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.message || 'Ошибка при обновлении пароля';\n      toast.error(message);\n      return { success: false, message };\n    } finally {\n      dispatch('setLoading', false, { root: true });\n    }\n  },\n  \n  checkAuth({ commit, state }) {\n    if (state.token && isTokenExpired(state.token)) {\n      commit('CLEAR_AUTH');\n      toast.info('Сессия истекла. Пожалуйста, войдите снова.');\n      router.push('/login');\n    }\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}